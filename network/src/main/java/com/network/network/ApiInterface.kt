package com.network.networkimport com.network.models.ModelDBSearchimport com.network.models.ModelDailyAlertimport com.network.models.ModelGetFeedsimport com.network.models.ModelPrivacyTermsimport com.network.models.ModelBooksimport com.network.models.ModelPostFeedimport com.network.models.ModelHomeimport com.network.models.ModelScholarsimport com.network.models.ModelUserimport com.network.models.ModelUpcomingimport com.network.models.ModelUploadFileimport okhttp3.MultipartBodyimport retrofit2.Responseimport retrofit2.http.*interface ApiInterface {    //AUTH    //socialLogin    @FormUrlEncoded    @POST("social/login")    suspend fun socialLogin(        @Field("social_id") social_id: String,        @Field("social_type") social_type: String,        @Field("device_id") device_id: String,        @Field("device_type") device_type: String,        @Field("email") email: String,        @Field("timezone") timezone: String,        @Field("name") name: String,        @Field("image") image: String,    ): Response<ModelUser>    //Profile    @GET("profile")    suspend fun profile(    ): Response<ModelUser>    //FEED    //feed    @FormUrlEncoded    @POST("feed")    suspend fun postFeed(        @Field("description") description: String,        @Field("file") file: String,    ): Response<ModelPostFeed>    //feedComment    @FormUrlEncoded    @POST("feed/comment/{postId}")    suspend fun feedComment(        @Path("postId") postId: Int,        @Field("comment") comment: String,        ): Response<SimpleResponse>    //getFeed    @GET("feed/{feedId}")    suspend fun getFeed(        @Path("feedId") feedId: Int    ): Response<ModelGetFeeds>    //feedReport    @GET("feed/repost/{feedId}")    suspend fun feedReport(        @Path("feedId") feedId: Int    ): Response<SimpleResponse>    //home    @GET("home")    suspend fun home(        @Query("pageno") page: Int,    ): Response<ModelHome>    //support    @FormUrlEncoded    @POST("support")    suspend fun support(        @Path("subject") subject: String,        @Field("message") message: String,    ): Response<SimpleResponse>    //books    @GET("books")    suspend fun books(    ): Response<ModelBooks>    //scholars    @GET("scholars")    suspend fun scholars(    ): Response<ModelScholars>    //getInheritanceLaw    @GET("inheritance_law")    suspend fun getInheritanceLaw(    ): Response<ModelPrivacyTerms>    //about    @GET("about")    suspend fun about(    ): Response<ModelPrivacyTerms>    //privacy    @GET("privacy")    suspend fun privacy(    ): Response<ModelPrivacyTerms>    //terms    @GET("terms")    suspend fun terms(    ): Response<ModelPrivacyTerms>    //DBSearch    @FormUrlEncoded    @POST("db_search")    suspend fun dbSearch(        @Field("type") type: String,        @Field("keyword") keyword: String,        ): Response<ModelDBSearch>    @Multipart    @POST("file/upload")    suspend fun uploadFile(        @Part url: MultipartBody.Part,    ): Response<ModelUploadFile>    //daily_alert    @GET("daily_alert")    suspend fun dailyAlert(    ): Response<ModelDailyAlert>    //upcoming    @GET("upcoming")    suspend fun upcoming(    ): Response<ModelUpcoming>}